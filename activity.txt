activity编写步骤
1 建立activity类及定义属性和内部方法
2 注册activity->manifest
3 在onCreate()进行界面与定义绑定
activity window,view的关系
1Activity构造时调用attach,绑定了一个window
2 activity setContentView()实际上是window.setContentView;
 
 动态添加组件
 getlayoutInflater().inflate(xml.id);//动态实例化layout
 找到父控件，然后addView,removeview就ok
 Intent,IntentFilter
 Intent传值
 
 startActivity的机制
 IBinder IPC进程间通讯，Activity四种LaunchMode
 
 定义intent-filter时，定义了<action>必须定义<category>即使为android.intent.category.DEFAULT
 否则在隐式启动时会找不到activity

 
 HierarchyViewer 查看控件树,现在用Monitor（D:\java\sdk\tools）
 
 activity生命周期
 保存activity状态
 app在onStop()后被kill清理掉会onSaveInstanceState
 onSaveInstanceState()；//保存状态
 在访问时会
 onCreate() or onRestoreInstanceState() //恢复状态
 
 配置改变
 <activity android:name=".MyActivity"
          android:configChanges="orientation|screen size"//当屏幕横竖屏改变时不会ReStart()
          android:label="@string/app_name">
 @Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);

    // Checks the orientation of the screen
    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
        Toast.makeText(this, "landscape", Toast.LENGTH_SHORT).show();
    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
        Toast.makeText(this, "portrait", Toast.LENGTH_SHORT).show();
    }
}
activity launchMode
 standard
 singleTop 
 设置true的activity在BackTask上时，不会重新启动一个新的，会回调onNewIntent()
 同时它之上的activity会destroy，
 singleTask  
 设置true的activity在backstack只有一个
 singleInstance
 设置true的activity启动时，会在一个新的backstack中有且只有它